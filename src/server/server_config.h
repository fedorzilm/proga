/*!
 * \file server_config.h
 * \brief Определяет структуру ServerConfig для хранения и управления конфигурационными параметрами сервера.
 *
 * ServerConfig позволяет загружать настройки из файла конфигурации и/или
 * переопределять их через аргументы командной строки. Это обеспечивает гибкость
 * при запуске и настройке сервера.
 */
#ifndef SERVER_CONFIG_H
#define SERVER_CONFIG_H

#include "common_defs.h" // Для LogLevel, DEFAULT_SERVER_LOG_FILE и др. констант
#include "logger.h"      // Для типа LogLevel
#include <string>
#include <optional>     // Может быть использован для параметров, которые могут быть не заданы

/*!
 * \struct ServerConfig
 * \brief Хранит конфигурационные параметры сервера.
 *
 * Включает сетевые настройки (порт, размер пула потоков), пути к файлам
 * (тарифы, директория данных, файл лога), уровень логирования и другие
 * возможные параметры. Предоставляет методы для загрузки из файла
 * и парсинга аргументов командной строки.
 */
struct ServerConfig {
    // --- Сетевые параметры ---
    int port = 12345;                       /*!< Порт, на котором сервер будет слушать входящие соединения. По умолчанию 12345. */
    size_t thread_pool_size = 4;            /*!< Количество рабочих потоков в пуле для обработки клиентских запросов. По умолчанию 4. */

    // --- Пути ---
    std::string tariff_file_path = "data/tariff_default.cfg"; /*!< Путь к файлу тарифного плана. Может быть относительным (например, от корня проекта или CWD) или абсолютным. */
    std::string server_data_root_dir = "";  /*!< Корневая директория для операций LOAD/SAVE на сервере. Если пуста, ServerCommandHandler попытается определить корень проекта или использовать CWD, добавляя к нему DEFAULT_SERVER_DATA_SUBDIR. */
    std::string log_file_path = DEFAULT_SERVER_LOG_FILE; /*!< Путь к файлу лога сервера. Если пуст, логирование только в консоль (зависит от Logger::init). По умолчанию "server.log". */

    // --- Логирование ---
    LogLevel log_level = LogLevel::INFO;    /*!< Уровень детализации логирования для сервера. По умолчанию LogLevel::INFO. */

    // --- Другие возможные параметры ---
    // int client_session_timeout_sec = 600; // Таймаут неактивности сессии клиента в секундах (пример)

    /*!
     * \brief Загружает конфигурацию из указанного файла.
     * Файл должен быть в формате "ключ=значение" (по одной паре на строку, строки с '#' - комментарии).
     * Если файл не найден, метод не генерирует ошибку, а оставляет текущие (возможно, дефолтные) значения.
     * Ошибки парсинга существующего файла логируются и могут привести к возврату `false`.
     * \param config_filename Имя файла конфигурации.
     * \return `true`, если конфигурация успешно загружена (или файл не найден и используются значения по умолчанию/текущие).
     * `false`, если произошла ошибка парсинга существующего файла конфигурации.
     */
    bool loadFromFile(const std::string& config_filename);

    /*!
     * \brief Применяет аргументы командной строки, переопределяя значения, загруженные из файла конфигурации или установленные по умолчанию.
     * \param argc Количество аргументов командной строки (из `main`).
     * \param argv Массив строк аргументов командной строки (из `main`).
     * \param server_executable_path Полный путь к исполняемому файлу сервера. Используется для разрешения относительных путей по умолчанию (например, для файла конфигурации по умолчанию).
     * \return `true`, если парсинг аргументов прошел успешно.
     * `false` при ошибке парсинга аргументов (например, неверный формат значения) или если был запрошен вывод справки (`-h`/`--help`).
     */
    bool parseCommandLineArgs(int argc, char* argv[], const std::string& server_executable_path);

    /*!
     * \brief Выводит справочную информацию по доступным аргументам командной строки для сервера.
     * \param app_name Имя исполняемого файла сервера (обычно `argv[0]`).
     */
    static void printHelp(const char* app_name);
};

#endif // SERVER_CONFIG_H
