/*!
 * \file date.h
 * \brief Определяет класс Date для представления и управления календарными датами.
 *
 * Класс Date инкапсулирует дату (день, месяц, год), обеспечивает ее валидацию
 * при создании (включая проверку на високосный год и корректное количество дней в месяце),
 * преобразование в строковый формат и операции сравнения.
 * Это обеспечивает типобезопасность и удобство при работе с датами в системе.
 */
#ifndef DATE_H
#define DATE_H

#include "common_defs.h" // Включает <string>, <iostream>, <stdexcept>
#include <string>
#include <iostream>
#include <stdexcept> // Для std::invalid_argument

/*!
 * \class Date
 * \brief Представляет календарную дату (день, месяц, год) и предоставляет операции для работы с ней.
 *
 * Класс обеспечивает валидацию даты при создании (например, 1-31 для дня, 1-12 для месяца,
 * проверка на високосный год). Поддерживает строковое представление "ДД.ММ.ГГГГ"
 * и операции сравнения (==, !=, <, >, <=, >=). Поддерживает ввод/вывод через потоки C++.
 * Класс помечен как `final`, так как не предназначен для наследования.
 */
class Date final {
private:
    int day_ = 1;   /*!< День месяца (1-31). */
    int month_ = 1; /*!< Месяц (1-12). */
    int year_ = 1970;  /*!< Год (например, 1900-2100, как определено в валидации). */

    /*!
     * \brief Проверяет, является ли указанный год високосным.
     * \param y Год для проверки.
     * \return `true`, если год `y` високосный, иначе `false`.
     */
    bool isLeap(int y) const noexcept;

    /*!
     * \brief Проверяет корректность указанной даты (день, месяц, год).
     * Учитывает количество дней в месяце и високосные годы.
     * Год должен быть в диапазоне [1900, 2100] (определено в реализации).
     * Если дата некорректна, выбрасывает исключение `std::invalid_argument`.
     * \param d День.
     * \param m Месяц.
     * \param y Год.
     * \throw std::invalid_argument если день, месяц или год выходят за допустимые диапазоны или дата не существует (например, 30 февраля).
     */
    void validate(int d, int m, int y);

public:
    /*!
     * \brief Конструктор по умолчанию.
     * Инициализирует дату значением по умолчанию 01.01.1970.
     */
    Date() noexcept; // day_, month_, year_ уже инициализированы

    /*!
     * \brief Конструктор, инициализирующий дату указанными значениями дня, месяца и года.
     * \param d День (1-31).
     * \param m Месяц (1-12).
     * \param y Год (например, 1900-2100).
     * \throw std::invalid_argument если указанная дата некорректна.
     */
    Date(int d, int m, int y);

    /*! \brief Возвращает день месяца. \return День (1-31). */
    int getDay() const noexcept { return day_; }
    /*! \brief Возвращает месяц. \return Месяц (1-12). */
    int getMonth() const noexcept { return month_; }
    /*! \brief Возвращает год. \return Год. */
    int getYear() const noexcept { return year_; }

    // Сеттеры не предоставляются, чтобы обеспечить неизменяемость объекта Date после создания,
    // что упрощает рассуждения о корректности данных. Если потребуется изменяемость,
    // сеттеры должны вызывать validate.

    /*!
     * \brief Преобразует дату в строковое представление.
     * \return Строка даты в формате "ДД.ММ.ГГГГ" (например, "01.01.1970").
     */
    std::string toString() const;

    // Операторы сравнения
    bool operator==(const Date& other) const noexcept;
    bool operator!=(const Date& other) const noexcept;
    bool operator<(const Date& other) const noexcept;
    bool operator>(const Date& other) const noexcept;
    bool operator<=(const Date& other) const noexcept;
    bool operator>=(const Date& other) const noexcept;

    /*!
     * \brief Перегруженный оператор вывода в поток.
     * Выводит дату в строковом формате "ДД.ММ.ГГГГ" в указанный поток.
     * \param os Выходной поток.
     * \param date Объект Date для вывода.
     * \return Ссылка на выходной поток.
     */
    friend std::ostream& operator<<(std::ostream& os, const Date& date);

    /*!
     * \brief Перегруженный оператор ввода из потока.
     * Считывает дату в строковом формате "ДД.ММ.ГГГГ" из указанного потока.
     * Устанавливает флаг `failbit` для потока в случае ошибки формата или невалидной даты.
     * \param is Входной поток.
     * \param date Объект Date для сохранения считанного значения.
     * \return Ссылка на входной поток.
     */
    friend std::istream& operator>>(std::istream& is, Date& date);
};

#endif // DATE_H
