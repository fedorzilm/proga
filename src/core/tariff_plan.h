/*!
 * \file tariff_plan.h
 * \author Fedor Zilnitskiy
 * \brief Определяет класс TariffPlan для управления почасовыми интернет-тарифами.
 *
 * TariffPlan загружает из файла и хранит почасовые тарифные ставки (стоимость за ГБ)
 * для входящего и исходящего интернет-трафика. Предоставляет доступ к этим ставкам.
 * Используется для расчета начислений абонентам.
 */
#ifndef TARIFF_PLAN_H
#define TARIFF_PLAN_H

#include "common_defs.h" // Для HOURS_IN_DAY и стандартных заголовков <vector>, <string>, <stdexcept>
#include <vector>
#include <string>
#include <stdexcept> // Для std::runtime_error, std::invalid_argument, std::out_of_range

/*!
 * \class TariffPlan
 * \brief Управляет почасовыми тарифными ставками для входящего и исходящего интернет-трафика.
 *
 * Загружает тарифные ставки из конфигурационного файла. Ожидается, что файл содержит
 * `HOURS_IN_DAY` ставок для входящего трафика, за которыми следуют `HOURS_IN_DAY` ставок
 * для исходящего трафика. Каждая ставка представляет стоимость за 1 ГБ трафика
 * для соответствующего часа суток и направления.
 * Класс помечен как `final`, так как не предназначен для наследования.
 */
class TariffPlan final {
private:
    std::vector<double> costInPerGBPerHour_{};  /*!< Вектор, хранящий стоимость за ГБ для входящего трафика для каждого из 24 часов. Индекс соответствует часу (0-23). */
    std::vector<double> costOutPerGBPerHour_{}; /*!< Вектор, хранящий стоимость за ГБ для исходящего трафика для каждого из 24 часов. Индекс соответствует часу (0-23). */

public:
    /*!
     * \brief Конструктор по умолчанию.
     * Инициализирует тарифный план, в котором все почасовые ставки (входящие и исходящие) равны 0.0.
     * Это состояние используется, если тарифный файл не загружен или содержит ошибки.
     */
    TariffPlan() noexcept;

    /*!
     * \brief Загружает тарифный план из указанного конфигурационного файла.
     *
     * Ожидаемый формат файла:
     * - `HOURS_IN_DAY` (24) числовых значений для входящего трафика (ставки за ГБ по часам 0-23).
     * - Затем `HOURS_IN_DAY` (24) числовых значений для исходящего трафика.
     * Числа могут быть на отдельных строках или разделены пробелами/табуляцией.
     * Строки, начинающиеся с символа '#', считаются комментариями и игнорируются.
     * Пустые строки также игнорируются. Тарифные ставки не могут быть отрицательными.
     *
     * \param filename Путь к конфигурационному файлу тарифов.
     * \return `true`, если загрузка прошла успешно и было прочитано корректное количество ставок.
     * При ошибках формата файла, невозможности открыть файл или некорректных значениях
     * выбрасывает соответствующее исключение. Тарифы при этом остаются в состоянии по умолчанию (нули).
     * \throw std::runtime_error если файл не может быть открыт или возникает ошибка чтения.
     * \throw std::invalid_argument если файл не содержит ровно (`HOURS_IN_DAY` * 2) корректных
     * (неотрицательных, числовых) тарифных ставок, или если формат чисел нарушен,
     * или если присутствуют лишние символы на строке после валидного числа.
     */
    bool loadFromFile(const std::string& filename);

    /*!
     * \brief Получает стоимость за ГБ для входящего трафика для указанного часа.
     * \param hour Час суток (0-23).
     * \return Стоимость за ГБ для входящего трафика.
     * \throw std::out_of_range если указанный час некорректен (вне диапазона 0-23)
     * или если тарифы не были корректно загружены (внутренние векторы пусты, что не должно происходить при корректном использовании).
     * \throw std::logic_error если тарифы не были загружены (внутренние векторы пусты).
     */
    double getCostInForHour(int hour) const;

    /*!
     * \brief Получает стоимость за ГБ для исходящего трафика для указанного часа.
     * \param hour Час суток (0-23).
     * \return Стоимость за ГБ для исходящего трафика.
     * \throw std::out_of_range если указанный час некорректен (вне диапазона 0-23).
     * \throw std::logic_error если тарифы не были загружены (внутренние векторы пусты).
     */
    double getCostOutForHour(int hour) const;

    /*!
     * \brief Получает все почасовые стоимости для входящего трафика.
     * \return Константная ссылка на вектор почасовых стоимостей (`HOURS_IN_DAY` элементов) для входящего трафика.
     */
    const std::vector<double>& getAllInCosts() const noexcept { return costInPerGBPerHour_; }

    /*!
     * \brief Получает все почасовые стоимости для исходящего трафика.
     * \return Константная ссылка на вектор почасовых стоимостей (`HOURS_IN_DAY` элементов) для исходящего трафика.
     */
    const std::vector<double>& getAllOutCosts() const noexcept { return costOutPerGBPerHour_; }
};

#endif // TARIFF_PLAN_H
